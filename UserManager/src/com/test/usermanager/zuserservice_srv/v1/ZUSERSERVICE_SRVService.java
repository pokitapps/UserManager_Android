package com.test.usermanager.zuserservice_srv.v1;

/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.LinkedList;
import java.util.List;

import android.content.res.Resources.NotFoundException;

import com.sap.gwpa.proxy.ODataQuery;
import com.sap.mobile.lib.configuration.IPreferences;
import com.sap.mobile.lib.configuration.Preferences;
import com.sap.mobile.lib.configuration.PreferencesException;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.Parser;
import com.sap.mobile.lib.parser.ParserException;
import com.sap.mobile.lib.supportability.ILogger;
import com.sap.mobile.lib.supportability.Logger;
import com.test.usermanager.zuserservice_srv.v1.entitytypes.User;


/**
 * ZUSERSERVICE_SRVService Proxy Class 
 * <br>User list service
 * <br>Service Version: v1. */
public class ZUSERSERVICE_SRVService
{
    private String baseUrl;
	
    private ILogger logger;
    private IPreferences preferences;
    private IParser parser;

    private IODataServiceDocument serviceDocument;
    private IODataSchema schema;
   
    /**
     * Constructs a new service (proxy) class, with the given parameters.
     * @param context - application context.
     * @param aServiceDocument - service document.
     * @param aServiceMetadata - service metadata.
     */
   	public ZUSERSERVICE_SRVService(android.content.Context context, String aServiceDocument, String aServiceMetadata)
   	{
    	initISDMParameters(context);
    	parseServiceDocumentAndMetadata(context, aServiceDocument, aServiceMetadata);
   	}
   	
    /**
     * Constructs a new service (proxy) class, with the given parameter.
     * @param context - application context.
     */
    public ZUSERSERVICE_SRVService(android.content.Context context)
    {
    	this(context, null, null);
    }
	
    /*
     * Parses the service document and metadata.
     */
    private void parseServiceDocumentAndMetadata(android.content.Context context, String aServiceDocument, String aServiceMetadata)
    {
    	try 
    	{
			if (aServiceDocument == null || aServiceMetadata == null)
			{
				serviceDocument = parser.parseODataServiceDocument(context.getResources().openRawResource(com.test.usermanager.R.raw.zuserservice_srvv1document));
				schema = parser.parseODataSchema(context.getResources().openRawResource(com.test.usermanager.R.raw.zuserservice_srvv1metadata),serviceDocument);
			}
			else
			{
				serviceDocument = parser.parseODataServiceDocument(aServiceDocument);
				schema = parser.parseODataSchema(aServiceMetadata,serviceDocument);
			}	
            			
			setUrl(serviceDocument.getBaseUrl());
			loadLabels();
        }
 		catch (NotFoundException e)
		{
			throw new ExceptionInInitializerError(e);
		} 
		catch (IllegalArgumentException e) 
		{
			throw new ExceptionInInitializerError(e);
		} 
		catch (ParserException e) 
		{
			throw new ExceptionInInitializerError(e);
		}	
    }
    
    private void initISDMParameters(android.content.Context context)
    {
    	logger = new Logger();
		preferences = new Preferences(context, logger);
		
		try 
		{
			preferences.setBooleanPreference(IPreferences.PERSISTENCE_SECUREMODE, false);
			parser = new Parser(preferences, logger);
		} 
		catch (PreferencesException e) 
		{
			throw new ExceptionInInitializerError(e);
		}
		catch (ParserException e) 
		{
			throw new ExceptionInInitializerError(e);
		}
    }
	
    /**
     * Returns the parser of this proxy class.
     * @return IParser.
     */
	public IParser getParser() 
	{
		return this.parser;
	}

	/**
	 * Returns the service document.
	 * @return - IODataServiceDocument.
	 */
	public IODataServiceDocument getServiceDocument() 
	{
		return this.serviceDocument;
	}

	/**
	 * Returns the schema of the service.
	 * @return - IODataSchema.
	 */
	public IODataSchema getSchema() 
	{
		return this.schema;
	}

    /**
     * Returns the base URL of the service.
     * @return - the base URL of the service.
     */
    public String getBaseUrl() 
	{
		return this.baseUrl;
    }
    
    /**
     * Sets the base URL of the service.
     * @param url - the url to set.
     */
    public void setUrl(String url) 
	{
		if (url.endsWith("/"))
    	{
    		baseUrl = url;
    	}
    	else
    	{
    		baseUrl = url + "/";
    	}
    }
	
	/**
     * Loads the labels for each entity type.
     * This method is called by the class initialisers.
     */
    public void loadLabels()
	{
		User.loadLabels(this.serviceDocument);
	}
	
// service collections

    /**
     * @return - the UsersQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getUsersQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "Users");
    }
	

   /**
    * UsersQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getUsersEntryQuery( String Username)  throws MalformedURLException, UnsupportedEncodingException
    {
		Username = URLEncoder.encode(Username, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "Users("+"Username='"+Username+"')");
    }
	 
	
	/**
	 * @return - the Users
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<User> getUsers(String data) throws ParserException, MalformedURLException
	{
		List<User> returnList  = new LinkedList<User>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "Users", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new User(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }

		
		
	/**
	 * @return - User when sending the key of User
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public User getUsersEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "Users", schema);
		return new User(list.get(0), parser, schema);
	}

} 
